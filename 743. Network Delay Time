class Solution {
public:   
    // dijkstra algo   
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector <vector<pair<int, int>>> adj(n+1);
        for(auto i:times){
            adj[i[0]].push_back({i[1],i[2]});
        }
        vector<int> dist(n+1,INT_MAX);
        priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0,k});
        dist[k] = 0;
        
        while(!pq.empty()){
            int top = pq.top().second;
            pq.pop();
            
            for(auto neighbour:adj[top]){
                if(dist[top]+neighbour.second < dist[neighbour.first]){
                     dist[neighbour.first] = dist[top]+neighbour.second;
                pq.push({dist[neighbour.first],neighbour.first});
                }
            }
        }
        int ans=*max_element(dist.begin()+1, dist.end()); 
        return ans==INT_MAX?-1:ans;    
    }
};
