class Solution {
public:
    int minGroups(vector<vector<int>>& intervals) {
        // same as meeting room problem asked in amazon
        if(intervals.size() == 0) return 0;
        // sort on the starting time 
        sort(intervals.begin(),intervals.end());
        // priority queue for keeping tarck of which meeting is finishing 
        priority_queue<int, vector<int>, greater<int>> pq;
        pq.push(intervals[0][1]);
        int len=1;
        for(int i=1;i<intervals.size();i++){
            // if current meeting starting time is greater than ending time of some other meeting
            if(intervals[i][0]>pq.top()){
                // use that room only
                pq.pop();
                pq.push(intervals[i][1]);
            }
            else{
                // otherwise create new room and push it in queue
                pq.push(intervals[i][1]);
                len++;
            }
        }
       return len;
    }
};
