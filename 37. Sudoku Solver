class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
    bool solve(vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j] == '.'){
                    for(char c='1';c<='9';c++){
                        if(isValid(c,board,i,j)){
                        board[i][j] = c;
                        
                        if(solve(board) == true){
                            return true;
                        }
                        else{
                            board[i][j] = '.';
                        }
                      }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(char c,vector<vector<char>>& board,int row,int col){
        for(int i=0;i<9;i++){
            // every row
            if(board[i][col] == c) return false;
            // every coloumn
            if(board[row][i] == c) return false;
            // 3X3 matrix
            if(board[3*(row/3) + i/3][3*(col/3)+i%3] == c) return false;
        }
        return true;
    }
};
